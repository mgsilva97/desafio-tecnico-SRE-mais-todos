# br-metabase-maistodos

# TODO:
# 1. Detalhar documentação AWS Cloudformation de cada recurso utilizado - OK
# 2. Usar ECS para montar o Cluster do Metabase - OK
# 3. Criar o Escalonamento do ECS via Cloudwatch de forma horizontal
# 4. Subredes diferentes entre Metabase (Subrede Publica) e Database (Subrede Privada) - OK
# 5. Deverá ter um CI/CD e de forma automatizada para entrega do Metabase (Fazer numa stack a parte?)
# 6. Disponibilizar o link ao metabase
# 7. Descrever quais foram os desafios encontrados no caminho e soluções

# URLs de referencia:
# VPC: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
# Subnet: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
# Route: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
# Internet Gateway + Attachment: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
# Internet Route Table Association: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
# Security Groups: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# ECS Cluster: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
# ECS Task Definition: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
# ECS Service: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
# EFS: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html
# RDS: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
# Application Load Balancer: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html


Parameters:
  EnvironmentName:
    Type: String
    Default: "MaisTodos"

  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16

  PublicSubnetCIDR:
    Type: String
    Default: 10.192.10.0/24
  
  PublicSubnetCIDR1:
    Type: String
    Default: 10.192.20.0/24
  
  PrivateSubnetCIDR:
    Type: String
    Default: 10.192.30.0/24

  PrivateSubnetCIDR1:
    Type: String
    Default: 10.192.40.0/24
  
  MasterUsername:
    Type: String
    Default: "postgres"

  MasterUserPassword:
    Type: String
    Default: "90kYzZ6xy"

  DesiredCount:
    Type: Number
    Default: 1
    MinValue: 0

Resources:
# Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      VpcId: !Ref VPC

# Cluster Metabase
  MetabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS tasks/containers that run on them
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        SourceSecurityGroupId: !Ref SecurityGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "metabase"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: metabase
          # Image: metabase/metabase
          Image: metabase:latest
          Essential: true
          Privileged: false
          Environment:
            # Variaveis essenciais para acesso ao metabase
            - Name: MB_DB_TYPE
              Value: postgres
            - Name: MB_DB_DBNAME
              Value: metabase
            - Name: MB_DB_PORT
              Value: 5432
            - Name: MB_DB_USER
              Value: !Ref MasterUsername
            - Name: MB_DB_PASS
              Value: !Ref MasterUserPassword
            - Name: MB_DB_HOST
              Value: !GetAtt DBCluster.Endpoint.Address
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          MountPoints:
            - ContainerPath: /metabase-data
              SourceVolume: metabase
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: br-metabase-maistodos-logs
              awslogs-region: us-east-1
              awslogs-stream-prefix: metabase
      Cpu: 2048  # 256, 512, 1024, 2048 e 4096. 1024 ? igual a 1 vCPU
      ExecutionRoleArn: !Ref ExecutionRole
      Family: metabase-TaskDefinition
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities: [EC2, FARGATE]
      Volumes:
        - Name: metabase
          EFSVolumeConfiguration:
            fileSystemId: !Ref MetabaseEfsFileSystem
            rootDirectory: "/"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: br-metabase-maistodos-logs
      RetentionInDays: 2

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS  # CODE_DEPLOY | ECS | EXTERNAL
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE  # EC2 | FARGATE
      LoadBalancers:
        - ContainerName: 'metabase'
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet
            # - !Ref PrivateSubnet1
          SecurityGroups:
            - !Ref MetabaseSecurityGroup
          # AssignPublicIp: DISABLE
      PlatformVersion: 1.4.0
      SchedulingStrategy: REPLICA  # DAEMON | REPLICA # USAR COM CODEDEPLOY
      ServiceName: metabase
      TaskDefinition: !Ref TaskDefinition
    
  MetabaseEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: False
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  MetabaseSecurityGroupEFS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS tasks/containers that run on them
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref MetabaseSecurityGroup

  MetabaseEfsMounTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MetabaseEfsFileSystem
      SecurityGroups:
        - !Ref MetabaseSecurityGroupEFS
      SubnetId: !Ref PrivateSubnet

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Aurora PostgreSQL DB Subnet Group for Cloudformation Stack"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MetabaseSecurityGroup
      VpcId: !Ref VPC

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora PostgreSQL Cluster Parameter Group for Cloudformation Stack
      Family: aurora-postgresql11
      Parameters:
        rds.force_ssl: 1
        rds.restrict_password_commands: 1
        apg_ccm_enabled: 1
  
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub Aurora PostgreSQL DB Subnet Group for Cloudformation Stack
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet1

  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AvailabilityZones: [us-east-1a, us-east-1b]
      BackupRetentionPeriod: 30
      DatabaseName: metabase
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - postgresql
      EnableIAMDatabaseAuthentication: true
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: 11.6
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      Port: 5432
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      CACertificateIdentifier: rds-ca-2019
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      PubliclyAccessible: false

  # Load Balancer definitions
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http2.enabled
          Value: true
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: [ !Ref PublicSubnet, !Ref PublicSubnet1 ]
      Type: application

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "503 Service Temporarily Unavailable"
            StatusCode: "503"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-499
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values: [!GetAtt LoadBalancer.DNSName]
      
      ListenerArn: !Ref Listener80
      Priority: 1200

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
