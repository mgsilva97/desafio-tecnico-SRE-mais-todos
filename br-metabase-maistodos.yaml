# br-metabase-maistodos

# TODO:
# 1. Detalhar documentação AWS Cloudformation de cada recurso utilizado
# 2. Usar ECS para montar o Cluster do Metabase
# 3. Criar o Escalonamento do ECS via Cloudwatch de forma horizontal
# 4. Subredes diferentes entre Metabase (Subrede Publica) e Database Redshift (Subrede Privada)
# 5. Deverá ter um CI/CD e de forma automatizada para entrega do Metabase (Fazer numa stack a parte?)
# 6. Disponibilizar o link ao metabase
# 7. Descrever quais foram os desafios encontrados no caminho e soluções

# URLs de referencia:
# VPC: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
# Subnet: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
# Route: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
# Internet Gateway + Attachment: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
# Internet Route Table Association: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
# Security Groups: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# ECS Cluster: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
# EFS: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html



Parameters:
  EnvironmentName:
  Type: String
  Default: "MaisTodos"

  PublicSubnetCIDR:
    Type: String
    Default: 10.192.10.0/24
  
  PrivateSubnetCIDR:
    Type: String
    Default: 10.192.20.0/24

Resources:
# Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      VpcId: !Ref VPC

# Cluster Metabase
  MetabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS tasks/containers that run on them
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        SourceSecurityGroupId: !Ref SecurityGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "metabase"
    
  MetabaseEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: False
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  MetabaseSecurityGroupEFS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS tasks/containers that run on them
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref MetabaseSecurityGroup

  MetabaseEfsMounTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MetabaseEfsFileSystem
      SecurityGroups:
        - !Ref MetabaseSecurityGroupEFS
      SubnetId: !Ref PrivateSubnet

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MetabaseSecurityGroup
      VpcId: !Ref VPC

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Family: aurora-postgresql11
      Parameters:
        rds.force_ssl: 1
        rds.restrict_password_commands: 1
        apg_ccm_enabled: 1
  
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds: !Ref PrivateSubnet

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: aurora-postgresql11
      Parameters: {}

  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AvailabilityZones: [us-east-1a, us-east-1b]
      BackupRetentionPeriod: 30
      DatabaseName: metabase
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: true
      EnableCloudwatchLogsExports:
        - postgresql
      EnableIAMDatabaseAuthentication: true
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: 11.6
      MasterUsername: postgres
      MasterUserPassword: 90kYzZ6xy
      Port: 5432
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      CACertificateIdentifier: rds-ca-2019
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.t3.medium
      DBParameterGroupName: !Ref DBParameterGroup
      Engine: aurora-postgresql
      PubliclyAccessible: false

  